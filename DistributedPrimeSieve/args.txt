----- algorithm 1 -----
Single processor implementation using modulo division to cross of composites
./CPAR-Project2 --algorithm 1 --countPrimesInNode Y --maxRangeInBits 25

----- algorithm 2 -----
Single processor implementation using primes multiples to cross of composites
./CPAR-Project2 --algorithm 2 --countPrimesInNode Y --maxRangeInBits 32

----- algorithm 3 -----
Single processor implementation using block search with bitset with all even numbers
./CPAR-Project2 --algorithm 3 --countPrimesInNode Y --cacheBlockSize 6291456 --maxRangeInBits 32

----- algorithm 4 -----
Single processor implementation using block search with bitset containing only the even numbers in the block
./CPAR-Project2 --algorithm 4 --countPrimesInNode Y --cacheBlockSize 32768 --maxRangeInBits 32

----- algorithm 5 -----
Single processor implementation using block search with bitset with all even numbers optimized for time
./CPAR-Project2 --algorithm 5 --countPrimesInNode Y --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 6 -----
Single processor implementation using block search with bitset with only possible primes numbers optimized for space and with modulo 30 wheel factorization
./CPAR-Project2 --algorithm 6 --countPrimesInNode Y --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 7 -----
Single processor implementation using block search with bitset with only possible primes numbers optimized for space and with modulo 210 wheel factorization
./CPAR-Project2 --algorithm 7 --countPrimesInNode Y --cacheBlockSize 1048576 --maxRangeInBits 32

----- algorithm 8 -----
Single processor implementation using block search with bitset with all even numbers optimized for time and space and with modulo 30 wheel factorization
./CPAR-Project2 --algorithm 8 --countPrimesInNode Y --cacheBlockSize 32768 --maxRangeInBits 32

----- algorithm 9 -----
Single processor implementation using block search with bitset with all even numbers optimized for time and space and with modulo 210 wheel factorization
./CPAR-Project2 --algorithm 9 --countPrimesInNode Y --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 10 -----
Single processor implementation using block search with bitset with all numbers optimized for time and with modulo 30 wheel factorization
./CPAR-Project2 --algorithm 10 --countPrimesInNode Y --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 11 -----
Fastest single processor implementation using block search with bitset with all numbers optimized for time and with modulo 210 wheel factorization
./CPAR-Project2 --algorithm 11 --countPrimesInNode Y --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 12 -----
OpenMP implementation using block search with bitset with all even numbers optimized for space and time and with modulo 210 wheel
./CPAR-Project2 --algorithm 12 --countPrimesInNode Y --cacheBlockSize 16384 --numberThreads 8 --maxRangeInBits 32

----- algorithm 13 -----
Fastest OpenMP implementation using block search with bitset with all numbers optimized for time and with modulo 210 wheel
./CPAR-Project2 --algorithm 13 --countPrimesInNode Y --cacheBlockSize 16384 --numberThreads 8 --maxRangeInBits 32

----- algorithm 14 -----
OpenMPI implementation using block search with bitset with all even numbers optimized for space and time and with modulo 210 wheel
mpirun -np 8 --hostfile ~/cpar/mpi_hostfile.ini CPAR-Project2 --algorithm 14 --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot N --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 15 -----
Hybrid implementation with OpenMPI and OpenMP using block search with bitset with all even numbers optimized for space and time and with modulo 210 wheel
mpirun -np 8 --hostfile ~/cpar/mpi_hostfile_hybrid.ini CPAR-Project2 --algorithm 15 --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot N --cacheBlockSize 16384 --numberThreads 0 --maxRangeInBits 32

----- algorithm 16 -----
Fastest hybrid implementation with OpenMPI and OpenMP using block search with bitset with all even numbers optimized for space and time with modulo 210 wheel and with dynamic scheduling
mpirun -np 9 --hostfile ~/cpar/mpi_hostfile_hybrid_dynamic.ini CPAR-Project2 --algorithm 16 --countPrimesInNode N --sendPrimesCountToRoot N --sendResultsToRoot N --cacheBlockSize 16384 --numberThreads 0 --dynamicSchedulingNumberSegments 10 --maxRangeInBits 32

----- algorithm 17 -----
OpenMPI implementation using block search with bitset with all numbers optimized for time and with modulo 210 wheel
mpirun -np 8 --hostfile ~/cpar/mpi_hostfile.ini CPAR-Project2 --algorithm 17 --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot N --cacheBlockSize 16384 --maxRangeInBits 32

----- algorithm 18 -----
Hybrid implementation with OpenMPI and OpenMP using block search with bitset with all numbers optimized for time and with modulo 210 wheel
mpirun -np 8 --hostfile ~/cpar/mpi_hostfile_hybrid.ini CPAR-Project2 --algorithm 18 --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot N --cacheBlockSize 16384 --numberThreads 0 --maxRangeInBits 32

----- algorithm 19 -----
Hybrid implementation with OpenMPI and OpenMP using block search with bitset with all numbers optimized for time with modulo 210 wheel and with dynamic scheduling
mpirun -np 9 --hostfile ~/cpar/mpi_hostfile_hybrid_dynamic.ini CPAR-Project2 --algorithm 19 --countPrimesInNode N --sendPrimesCountToRoot N --sendResultsToRoot N --cacheBlockSize 16384 --numberThreads 0 --dynamicSchedulingNumberSegments 10 --maxRangeInBits 32



------  tests  ------

// test 10000 primes with dynamic scheduling
mpirun -np 5 --hostfile ~/cpar/mpi_hostfile_hybrid.ini CPAR-Project2 --algorithm 16 --maxRange 104729 --cacheBlockSize 512 --dynamicSchedulingNumberSegments 4 --numberThreads 0 --outputResult r_10000.txt --checkResult ~/cpar/10000.txt --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot Y


// test 1000 primes with dynamic scheduling
mpirun -np 5 --hostfile ~/cpar/mpi_hostfile_hybrid_dynamic.ini CPAR-Project2 --algorithm 16 --maxRange 7920 --cacheBlockSize  128 --dynamicSchedulingNumberSegments 8 --numberThreads 0 --outputResult r_1000.txt --checkResult /home/carloscosta/cpar/1000.txt --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot Y


// test 1000 primes with dynamic scheduling degraded mode
mpirun --mca mpi_yield_when_idle 1 -np 3 --hostfile ~/cpar/mpi_hostfile_hybrid.ini CPAR-Project2 --algorithm 16 --maxRange 7920 --cacheBlockSize  128 --dynamicSchedulingNumberSegments 8 --numberThreads 0 --outputResult r_1000.txt --checkResult /home/carloscosta/cpar/1000.txt --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot Y


// test 1000 primes with dynamic scheduling diferent consoles
mpirun -np 3 --hostfile ~/cpar/mpi_hostfile_hybrid.ini -x DISPLAY=13CMCC37:0.0 terminator -e CPAR-Project2 --algorithm 16 --maxRange 7920 --cacheBlockSize  128 --dynamicSchedulingNumberSegments 8 --numberThreads 0 --outputResult r_1000.txt --checkResult /home/carloscosta/cpar/1000.txt --countPrimesInNode Y --sendPrimesCountToRoot N --sendResultsToRoot N

// test 10000 primes
mpirun -np 2 --hostfile ~/cpar/mpi_hostfile_hybrid.ini CPAR-Project2 --algorithm 15 --maxRange 104729 --cacheBlockSize 16384 --numberThreads 0 --outputResult r_10000.txt --checkResult ~/cpar/10000.txt --countPrimesInNode Y --sendPrimesCountToRoot N --sendResultsToRoot Y

// test 1000 primes
mpirun -np 2 --hostfile ~/cpar/mpi_hostfile_hybrid.ini CPAR-Project2 --algorithm 15 --maxRange 7920 --cacheBlockSize 16384 --numberThreads 0 --outputResult r_1000.txt --checkResult ~/cpar/1000.txt --countPrimesInNode Y --sendPrimesCountToRoot Y --sendResultsToRoot Y


----- commands -----
cd ~/git/cpar-12-13/CPAR-Project2/Release
cd ~/git/cpar-12-13/CPAR-Project2/Debug
scp CPAR-Project2 13CMCC37-G51J:~/git/cpar-12-13/CPAR-Project2/Release
scp CPAR-Project2 13CMCC37-G51J:~/git/cpar-12-13/CPAR-Project2/Debug


----- ranges -----
2^36 -> 68719476736
2^35 -> 34359738368
2^34 -> 17179869184
2^33 -> 8589934592
2^32 -> 4294967296
2^31 -> 2147483648
2^30 -> 1073741824
2^29 -> 536870912
2^28 -> 268435456
2^27 -> 134217728
2^26 -> 67108864
2^25 -> 33554432
